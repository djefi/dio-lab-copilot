## Copilot
Claro! Vamos criar uma lista em Python. As listas s√£o estruturas de dados muito √∫teis para armazenar cole√ß√µes de elementos. Aqui est√£o algumas maneiras de criar e manipular listas:
- Criando uma lista simples:
Para criar uma lista no Python, utilizamos colchetes [] e separamos os elementos por v√≠rgulas. Por exemplo:

lista_compras = ['banana', 'laranja', 'ma√ß√£']
print(lista_compras)

Isso criar√° uma lista chamada lista_compras com os itens 'banana', 'laranja' e 'ma√ß√£'. Lembre-se de que as posi√ß√µes na lista come√ßam a partir do √≠ndice 0, ou seja, 'banana' est√° na posi√ß√£o 0, 'laranja' na posi√ß√£o 1 e 'ma√ß√£' na posi√ß√£o 2.
- Acessando os dados de uma lista:
    - Para acessar um item da lista, utilizamos a estrutura nomedalista[posi√ß√£o]. Por exemplo:
        - print(lista_compras[1]) exibir√° 'laranja'.
        - print(lista_compras[0]) exibir√° 'banana'.
        - Tente acessar a posi√ß√£o 3 (print(lista_compras[3])) e voc√™ ver√° um erro, pois n√£o existe uma posi√ß√£o 3 nessa lista.
    - Tamb√©m podemos usar √≠ndices negativos para acessar a lista na ordem inversa:
        - print(lista_compras[-1]) exibir√° 'ma√ß√£'.
- M√©todos do Python para manipular listas:
    - .append(item): adiciona o item ao final da lista.
    - .insert(posi√ß√£o, item): insere um item na posi√ß√£o indicada.
    - del lista[posi√ß√£o]: remove um item da lista com base na posi√ß√£o.
    - .remove(item): remove um item com base no seu valor.
    - .pop(): remove o √∫ltimo item da lista (mas n√£o o exclui).
Agora voc√™ est√° pronto para criar e manipular listas em Python! üêç‚ú®
